<style type="text/css">
  #chartHeader {
     font-weight: bold; 
     font-size:1.9em;
     margin-bottom:.2em;
  }
</style>

<div id="chartHeader">My Events (in hours) </div>

<link href="/stylesheets/protovis.tipsy.css" type="text/css" rel="stylesheet"/>
<script type="text/javascript">

  // helper data structure for displaying dates 
  var months = new Array(13);
  months[0]  = "January";
  months[1]  = "February";
  months[2]  = "March";
  months[3]  = "April";
  months[4]  = "May";
  months[5]  = "June";
  months[6]  = "July";
  months[7]  = "August";
  months[8]  = "September";
  months[9]  = "October";
  months[10] = "November";
  months[11] = "December";
  //the start of the month represented as a time in ms
  var startMonth;  
  //the end of the month represented as a time in ms
  var endMonth; 

  // Returns a dictionary mapping tags to aggregated times.
  function computeTagTimes(activities) {
    var tagTimes = new Object();
    for (var i = 0; i < activities.length; i++) {
      var activity = activities[i];
      var startTime = activity['startTime'];
      var endTime = activity['endTime'];
      var totalTime = (endTime - startTime) * 1.0 / (1000 * 60 * 60);
      var tag = activity['tag'];
      if (tag == null || tag == 'Select a tag') {
        tag = 'Other';
      }
      var prevValue = tagTimes['tag'];
      if (prevValue == null) {
        prevValue = 0;
      }
      tagTimes[tag] = prevValue + totalTime;
    }
    return tagTimes;
  }

  // Split a dictionary mapping tag->time into an array of (tag,totalTime)
  // tuples.
  function generateTuples(tagTimes) {
    var tagTimeTuples = new Array();
    tagTimeTuples.totalTime = 0;
    for (var tag in tagTimes) {
      var tagTimeTuple = new Object();
      tagTimeTuple.tag = tag;
      tagTimeTuple.totalTime = tagTimes[tag];
      tagTimeTuples.totalTime += tagTimes[tag];
      tagTimeTuples.push(tagTimeTuple);
    }
    return tagTimeTuples;
  }

  // Change the header to reflect what range of dates the pie chart is covering.
  function changeHeader() {
   $('#chartHeader').append(" for " + months[sessionStorage.getItem('month')] + " " + sessionStorage.getItem('year')); 

  }
  function filterDateFunction(activity, index) {
    var startTime = activity['startTime'];
    return startTime > startMonth && startTime < endMonth;
  }

  function changeFilterData() {
    var currentMonth = sessionStorage.getItem('month'); 
    var currentYear = sessionStorage.getItem('year'); 
    var beginningMonthDate = new Date(); 
    beginningMonthDate.setFullYear(currentYear);
    beginningMonthDate.setMonth(currentMonth);
    beginningMonthDate.setDate(1);
    beginningMonthDate.setHours(0);
    beginningMonthDate.setMinutes(0);
    beginningMonthDate.setSeconds(0);
    alert(beginningMonthDate.toLocaleDateString());
    startMonth = beginningMonthDate.getTime();

    
    var endingMonthDate = new Date();
    currentYear = currentMonth ==11 ? Number(currentYear) + Number(1) : currentYear;
    endingMonthDate.setFullYear(currentYear);
    var nextMonth = (Number(currentMonth) + Number(1)) %12;
    endingMonthDate.setMonth(nextMonth);
    endingMonthDate.setDate(1);
    endingMonthDate.setHours(0);
    endingMonthDate.setMinutes(0);
    endingMonthDate.setSeconds(0);
    alert(endingMonthDate);
    endMonth = endingMonthDate.getTime();
  }
  changeHeader();
  var unencryptedEvents = encryptionHelpers.unpackEncryptedEvents(<%= raw @contents %>)
  //update the parameters that we search by
  changeFilterData();
  var filteredEventsByDate = $.grep(unencryptedEvents, filterDateFunction); 
  var tagTimeTuples = generateTuples(computeTagTimes(filteredEventsByDate));

</script>


<div id="chart_div">
  <script type="text/javascript+protovis">
    var RADIUS = 220;
    var ERADIUS = RADIUS + 10;
    var DIAMETER = ERADIUS * 2;
    var colors = pv.Colors.category20();
    // Place a pie chart here.
    var root = new pv.Panel()
        .width(DIAMETER + 200)
        .height(DIAMETER);
    root.add(pv.Wedge)
        .data(tagTimeTuples)
        .def("o", -1)
        .outerRadius(RADIUS)
        .angle(function(d) d.totalTime / tagTimeTuples.totalTime * 2 * Math.PI)
        .left(function() ERADIUS
            + Math.cos(this.startAngle() + this.angle() / 2)
            * ((this.o() == this.index) ? 10 : 0))
        .bottom(function() ERADIUS
            - Math.sin(this.startAngle() + this.angle() / 2)
            * ((this.o() == this.index) ? 10 : 0))
      .text(function(d) d.tag + ": " + d.totalTime.toPrecision(2))
      .fillStyle(function(d) colors(d.tag))
      .event("mouseover", function() this.o(this.index))
      // this second mouseover function overrwrites the one above
      .event("mouseover", pv.Behavior.tipsy({fade: true}));
    /* A legend entry for each tag. */
    root.add(pv.Dot)
        .data(tagTimeTuples)
        .left(DIAMETER + 30)
        .top(function() this.index * 20 + 60)
        .fillStyle(function(d) colors(d.tag))
        .strokeStyle(null)
        .shape("square")
        .size(30)
      .anchor("right").add(pv.Label)
      .text(function(d) d.tag + ": " + d.totalTime.toPrecision(2))
      .font("15px sans-serif");
    root.render();
  </script>
</div>
